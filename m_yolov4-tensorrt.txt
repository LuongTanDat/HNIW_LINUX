git clone https://github.com/jkjung-avt/tensorrt_demos

[ERROR] NVCC command not found:
change contents in *.sh file from NVCC=nvcc to
NVCC=/usr/local/cuda/bin/nvcc

[INFO] install dependencies
sudo apt update
sudo apt install -y build-essential python3-dev
sudo apt install -y libboost-python-dev libboost-thread-dev

[ERROR] related to "amd64"
sudo apt purge ".*:amd64"
sudo dpkg --remove-architecture amd64

[ERROR] pip3 install onnx
sudo pip3 install setuptools==41.0.0
sudo apt update
sudo apt install protobuf-compiler libprotoc-dev
sudo pip3 install onnx==1.4.1

[RUN]
python3 yolo_to_onnx.py -m yolov4-416 -c 1
python3 onnx_to_tensorrt.py -m yolov4-416 -c 1 -v
python3 m_trt_yolo.py -m yolov4-416 -c 1

[DARKNET]
python3 m_darknet_images.py --input dog.jpg --dont_show --weights yolov4-custom_final1.2.weights --config_file yolov4-custom.cfg --data_file cfg/m_coco.data


[TEST]
# m_trt_yolo.py

import os
import time
import argparse
from tqdm import tqdm
import cv2
import pycuda.autoinit  # This is needed for initializing CUDA driver

from utils.yolo_classes import get_cls_dict
from utils.yolo_with_plugins import TrtYOLO

def parse_args():
    """Parse input arguments."""
    desc = ('Capture and display live camera video, while doing '
            'real-time object detection with TensorRT optimized '
            'YOLO model on Jetson')
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument(
        '-c', '--category_num', type=int, default=80,
        help='number of object categories [80]')
    parser.add_argument(
        '-m', '--model', type=str, required=True,
        help=('[yolov3|yolov3-tiny|yolov3-spp|yolov4|yolov4-tiny]-'
              '[{dimension}], where dimension could be a single '
              'number (e.g. 288, 416, 608) or WxH (e.g. 416x256)'))
    args = parser.parse_args()
    return args


def main():
    args = parse_args()
    if args.category_num <= 0:
        raise SystemExit('ERROR: bad category_num (%d)!' % args.category_num)
    if not os.path.isfile('yolo/%s.trt' % args.model):
        raise SystemExit('ERROR: file (yolo/%s.trt) not found!' % args.model)

    cls_dict = get_cls_dict(args.category_num)
    yolo_dim = args.model.split('-')[-1]
    if 'x' in yolo_dim:
        dim_split = yolo_dim.split('x')
        if len(dim_split) != 2:
            raise SystemExit('ERROR: bad yolo_dim (%s)!' % yolo_dim)
        w, h = int(dim_split[0]), int(dim_split[1])
    else:
        h = w = int(yolo_dim)
    if h % 32 != 0 or w % 32 != 0:
        raise SystemExit('ERROR: bad yolo_dim (%s)!' % yolo_dim)

    img = cv2.imread("dog.jpg")

    trt_yolo = TrtYOLO(args.model, (h, w), args.category_num)

    for i in tqdm(range(1000)):
        boxes, confs, clss = trt_yolo.detect(img, 0.3)


if __name__ == '__main__':
    main()

